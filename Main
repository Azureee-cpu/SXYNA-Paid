
 -- Main Menu
 local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
 local Players = game:GetService("Players")
 local LocalPlayer = Players.LocalPlayer
 local UserInputService = game:GetService("UserInputService")
 local Camera = workspace.CurrentCamera
 local RunService = game:GetService("RunService")
 local TeleportService = game:GetService("TeleportService")
 local HttpService = game:GetService("HttpService")
 
local uiInitialized = false




 local Window = Rayfield:CreateWindow({
     Name = "SXYNA PAYED V1",
     Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
     LoadingTitle = " SXYNA",
     LoadingSubtitle = "Welcome! Have Fun.",
     ShowText = "SXYNA PAID", -- for mobile users to unhide rayfield, change if you'd like
     Theme = "Amethyst", -- Check https://docs.sirius.menu/rayfield/configuration/themes
  
     ToggleUIKeybind = "P", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)
  
     DisableRayfieldPrompts = true,
     DisableBuildWarnings = true, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
  
     ConfigurationSaving = {
        Enabled = true,
        FolderName = "SXYNA", -- Create a custom folder for your hub/game
        FileName = "PAID"
     },
  
     Discord = {
        Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
        Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
        RememberJoins = true -- Set this to false to make them join the discord every time they load it up
     },
  
     KeySystem = false, -- Set this to true to use our key system
     KeySettings = {
        Title = "Untitled",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
        FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
        SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
        GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
        Key = {""} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
     }
  })
 
  Rayfield:Notify({
     Title = "SXYNA Notifications",
     Content = "Your Key Has Been Accepted. Have Fun.",
     Duration = 6.5,
     Image = "rewind",
  })
 
  local Tab = Window:CreateTab("Information", "book-open-text")
  
  local Section = Tab:CreateSection("Executor Information")
 
  -- Supported executors
 local supportedExecutors = {
     ["xeno"] = true,
     ["delta"] = true
 }
 
 -- Robust executor detection
 local function detectExecutor()
     -- Xeno detection
     if type(rawget(_G, "Xeno")) == "table" then
         return "Xeno"
     end
     if pcall(function() return Xeno end) then
         return "Xeno"
     end
 
     -- Delta detection
     if rawget(_G, "DELTA") or rawget(_G, "Delta") or rawget(_G, "delta") then
         return "Delta"
     end
 
     -- Synapse
     if syn then return "Synapse X" end
     -- KRNL
     if KRNL_LOADED then return "Krnl" end
     -- Fluxus
     if Fluxus then return "Fluxus" end
     -- SirHurt
     if is_sirhurt_closure then return "SirHurt" end
 
     -- Fallback based on functions many executors define
     if type(setclipboard) == "function" then
         return "Unknown (setclipboard exists)"
     end
 
     return "Unknown"
 end
 
 -- Normalize for supported check
 local function normalizeName(name)
     if not name then return "unknown" end
     name = name:lower()
     if name:match("xeno") then return "xeno" end
     if name:match("delta") then return "delta" end
     return "unknown"
 end
 
 -- Detect
 local executorName = detectExecutor()
 local normalized = normalizeName(executorName)
 local isSupported = supportedExecutors[normalized] or false
 
 -- Update Rayfield paragraphs
 local ParagraphExecutor = Tab:CreateParagraph({
     Title = "Executor:",
     Content = executorName
 })
 
 local ParagraphSupported = Tab:CreateParagraph({
     Title = "Supported?",
     Content = isSupported and "Executor Is Supported" or "Executor Not Supported. Some features may not work."
 })
 
 local Section = Tab:CreateSection("Player Information")
 
 -- Basic info (static)
 local username = LocalPlayer.Name
 local displayName = LocalPlayer.DisplayName
 local userId = LocalPlayer.UserId
 local accountAge = LocalPlayer.AccountAge
 local accountCreationDate = os.date("%Y-%m-%d", os.time() - accountAge*24*60*60)
 local membershipType = LocalPlayer.MembershipType.Name
 local isPremium = LocalPlayer.MembershipType == Enum.MembershipType.Premium
 
 -- Thumbnail
 local thumbnailUrl = Players:GetUserThumbnailAsync(userId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size100x100)
 
 -- Rayfield static paragraphs
 Tab:CreateParagraph({Title = "Username", Content = username})
 Tab:CreateParagraph({Title = "Display Name", Content = displayName})
 Tab:CreateParagraph({Title = "UserId", Content = tostring(userId)})
 Tab:CreateParagraph({Title = "Account Age (days)", Content = tostring(accountAge)})
 Tab:CreateParagraph({Title = "Account Creation Date", Content = accountCreationDate})
 Tab:CreateParagraph({Title = "Membership Type", Content = membershipType})
 Tab:CreateParagraph({Title = "Premium Member?", Content = isPremium and "Yes" or "No"})
 
 -- Thumbnail Image
 local ContentFrame = Tab["Content"] or Tab.Frame
 if ContentFrame then
     local ThumbnailLabel = Instance.new("ImageLabel")
     ThumbnailLabel.Size = UDim2.new(0, 100, 0, 100)
     ThumbnailLabel.Position = UDim2.new(0, 10, 0, 10)
     ThumbnailLabel.Image = thumbnailUrl
     ThumbnailLabel.BackgroundTransparency = 1
     ThumbnailLabel.Parent = ContentFrame
 end
 
 
  local PlayerTab = Window:CreateTab("Player", "user-round")

  local Button = PlayerTab:CreateButton({
    Name = "Sit",
    Callback = function()
        game.Players.LocalPlayer.Character.Humanoid.Sit = true
    end,
 })
 
 local SpeedInput = PlayerTab:CreateInput({
    Name = "Speed Changer",
    CurrentValue = 16,
    PlaceholderText = "Speed",
    RemoveTextAfterFocusLost = true,
    Flag = "Input1",
    Callback = function(num1)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = num1
        Rayfield:Notify({
            Title = "SXYNA - Notifications",
            Content = "Player Speed Has Been Changed. If You Need Help Visit The Help Tab.",
            Duration = 6.5,
            Image = "code",
        })
    end,
 })

local RSpeedButton = PlayerTab:CreateButton({
   Name = "Reset Player Speed",
   Callback = function()
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = ("16")
        Rayfield:Notify({
            Title = "SXYNA - Notifications",
            Content = "Player Speed Has Been Reset. If You Need Help Visit The Help Tab.",
            Duration = 6.5,
            Image = "code",
        })
   end,
})

 local JPInput = PlayerTab:CreateInput({
    Name = "JumpPower Changer",
    CurrentValue = 50,
    PlaceholderText = "Power",
    RemoveTextAfterFocusLost = true,
    Flag = "Input1",
    Callback = function(num2)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = num2
                -- Notification
            Rayfield:Notify({
                Title = "SXYNA - Notifications",
                Content = "Player Jump Power Has Been Changed. If You Need Help Visit The Help Tab.",
                Duration = 6.5,
                Image = "code",
            })
    end,
 })

 local RJumpButton = PlayerTab:CreateButton({
    Name = "Reset Player Jump Power",
    Callback = function()
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = ("50")
        -- Notification
        Rayfield:Notify({
            Title = "SXYNA - Notifications",
            Content = "Player Jump Power Has Been Reset. If You Need Help Visit The Help Tab.",
            Duration = 6.5,
            Image = "code",
         })
    end,
 })



-- ✈️ HD-Admin Style Flight System
local flying = false
local flySpeed = 50
local flyConn

local function toggleFly(state)
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    local hrp = character.HumanoidRootPart
    local humanoid = character:FindFirstChildOfClass("Humanoid")

    flying = state

    if flying then
        humanoid.PlatformStand = true

        local bv = Instance.new("BodyVelocity")
        bv.MaxForce = Vector3.new(1e6, 1e6, 1e6)
        bv.Velocity = Vector3.zero
        bv.P = 1e4
        bv.Parent = hrp

        local bg = Instance.new("BodyGyro")
        bg.MaxTorque = Vector3.new(1e6, 1e6, 1e6)
        bg.CFrame = hrp.CFrame
        bg.P = 1e4
        bg.Parent = hrp

        flyConn = RunService.RenderStepped:Connect(function()
            if not flying or not hrp or not hrp.Parent then return end

            -- Align character with camera
            local camCFrame = Camera.CFrame
            bg.CFrame = CFrame.new(hrp.Position, hrp.Position + camCFrame.LookVector)

            -- Move in full 3D space
            local moveDir = Vector3.zero
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                moveDir += camCFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                moveDir -= camCFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                moveDir -= camCFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                moveDir += camCFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                moveDir += Vector3.new(0, 1, 0)
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                moveDir -= Vector3.new(0, 1, 0)
            end

            if moveDir.Magnitude > 0 then
                bv.Velocity = moveDir.Unit * (flySpeed or 50)
            else
                bv.Velocity = Vector3.zero
            end
        end)
    else
        humanoid.PlatformStand = false
        if flyConn then flyConn:Disconnect() flyConn = nil end
        for _, v in ipairs(hrp:GetChildren()) do
            if v:IsA("BodyVelocity") or v:IsA("BodyGyro") then
                v:Destroy()
            end
        end
    end
end

-- ✅ Rayfield Toggle for Fly
local Toggle = PlayerTab:CreateToggle({
    Name = "Flight",
    CurrentValue = false,
    Flag = "FlightToggle",
    Callback = function(Value)
        toggleFly(Value)
        Rayfield:Notify({
            Title = "SXYNA - Notifications",
            Content = Value and "Flight Enabled" or "Flight Disabled",
            Duration = 5,
            Image = "code",
        })
    end,
})

-- ✅ Rayfield Input for Flight Speed
local Input = PlayerTab:CreateInput({
    Name = "Flight Speed",
    CurrentValue = tostring(flySpeed),
    PlaceholderText = "Enter speed (e.g. 50)",
    RemoveTextAfterFocusLost = true,
    Flag = "FlightSpeedInput",
    Callback = function(val)
        flySpeed = tonumber(val) or 50
        Rayfield:Notify({
            Title = "SXYNA - Notifications",
            Content = "Flight speed set to " .. tostring(flySpeed),
            Duration = 4,
            Image = "code",
        })
    end,
})

-- Auto stop flying when character resets
LocalPlayer.CharacterAdded:Connect(function()
    flying = false
    if flyConn then flyConn:Disconnect() flyConn = nil end
end)

local noclip, noclipConn = false, nil
local function toggleNoclip(state)
    noclip = state
    if noclip then
        noclipConn = RunService.Stepped:Connect(function()
            if LocalPlayer.Character then
                for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then part.CanCollide = false end
                end
            end
        end)
    else
        if noclipConn then noclipConn:Disconnect() noclipConn = nil end
    end
end
PlayerTab:CreateToggle({Name="NoClip", CurrentValue=false, Callback=toggleNoclip})

local InfiniteJumpEnabled = false
UserInputService.JumpRequest:Connect(function()
    if InfiniteJumpEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
    end
end)

PlayerTab:CreateToggle({Name="Infinite Jump", CurrentValue=false, Callback=function(state) InfiniteJumpEnabled = state end})


local ClickTPEnabled=false
PlayerTab:CreateToggle({Name="Click TP", CurrentValue=false, Callback=function(state) ClickTPEnabled=state end})
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if ClickTPEnabled and input.UserInputType == Enum.UserInputType.MouseButton1 then
        local mouse = LocalPlayer:GetMouse()
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and mouse and mouse.Hit then
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(mouse.Hit.p + Vector3.new(0,3,0))
        end
    end
end)

 local WorldTab = Window:CreateTab("World", "earth-lock")

 WorldTab:CreateSlider({Name="Gravity", Range={0,1000}, Increment=1, CurrentValue=workspace.Gravity, Callback=function(val) workspace.Gravity=val end})

 local Button = WorldTab:CreateButton({
    Name = "Reset Gravity",
    Callback = function()
     workspace.Gravity=196.2
     Rayfield:Notify({
        Title = "SXYNA - Notifications",
        Content = "Gravity Reset.",
        Duration = 6.5,
        Image = "code",
     })
    end,
 })

 local Button = WorldTab:CreateButton({
    Name = "Low Gravity",
    Callback = function()
     workspace.Gravity=80
     Rayfield:Notify({
        Title = "SXYNA - Notifications",
        Content = "Low Gravity Active.",
        Duration = 6.5,
        Image = "code",
     })
    end,
 })

 local Button = WorldTab:CreateButton({
    Name = "Zero Gravity",
    Callback = function()
     workspace.Gravity=0
     Rayfield:Notify({
        Title = "SXYNA - Notifications",
        Content = "Zero Gravity Active.",
        Duration = 6.5,
        Image = "code",
     })
    end,
 })

 local Button = WorldTab:CreateButton({
    Name = "Stick To Ground",
    Callback = function()
     workspace.Gravity=10000
     Rayfield:Notify({
        Title = "SXYNA - Notifications",
        Content = "Stick To Ground Active.",
        Duration = 6.5,
        Image = "code",
     })
    end,
 })
 

 local UtilityTab = Window:CreateTab("Utility", "wrench")

 UtilityTab:CreateButton({Name="Rejoin Server", Callback=function() TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer) end})
 UtilityTab:CreateButton({Name="Server Hop", Callback=function()
    local servers = {}
    local httpFunc = nil
    if syn and syn.request then httpFunc = syn.request end
    if http_request and not httpFunc then httpFunc = http_request end
    if request and not httpFunc then httpFunc = request end

    if not httpFunc then
        Rayfield:Notify({Title="SXYNA", Content="Server hop unavailable: no http function", Duration=4, Image="code"})
        return
    end

    local ok, res = pcall(function()
        return httpFunc({Url = "https://games.roblox.com/v1/games/"..tostring(game.PlaceId).."/servers/Public?sortOrder=Asc&limit=100"})
    end)
    if not ok or not res or not res.Body then
        Rayfield:Notify({Title="SXYNA", Content="Server hop failed (http)", Duration=4, Image="code"})
        return
    end

    local success, decoded = pcall(function() return HttpService:JSONDecode(res.Body) end)
    if not success or not decoded or not decoded.data then
        Rayfield:Notify({Title="SXYNA", Content="Server hop failed (parse)", Duration=4, Image="code"})
        return
    end

    for _,v in pairs(decoded.data) do
        if type(v) == "table" and v.playing and v.maxPlayers and v.id and v.id ~= game.JobId then
            if v.playing < v.maxPlayers then table.insert(servers, v.id) end
        end
    end

    if #servers > 0 then
        TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1,#servers)], LocalPlayer)
    else
        Rayfield:Notify({Title="SXYNA", Content="No suitable servers found", Duration=4, Image="code"})
    end
end})


 local SettingsTab = Window:CreateTab("Settings", "settings")
 
 local themeChanger =
    SettingsTab:CreateDropdown(
    {
        Name = "Theme",
        Options = {"Default", "AmberGlow", "Amethyst", "Bloom", "DarkBlue", "Green", "Light", "Ocean", "Serenity"},
        CurrentOption = {"Default"},
        MultipleOptions = false,
        Flag = "Dropdown1",
        Callback = function(option)
            Window.ModifyTheme(option[1])
        end
    }
)


local HelpTab = Window:CreateTab("Help", "shield-alert")

local Button = HelpTab:CreateButton({
    Name = "Discord Server",
    Callback = function()
        setclipboard(".gg/template")
        Rayfield:Notify({
            Title = "SXYNA - Notifications",
            Content = "Discord Link Copied.",
            Duration = 6.5,
            Image = "code",
         })
    end,
 })
